#!/usr/bin/perl -T
#
# This script provides the basis for a plugin documentation system for
# munin.  Please see "man perlpod" for the reference manual to writing
# pod files.
#
# This is a very thin veneer for re-using perldoc for our own purposes.
#
# ---
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
# ---
#

require 5;

use strict;
use warnings;
use Pod::Perldoc;
use File::Find;
use Munin::Common::Defaults;

local $ENV{PATH} = '/usr/bin/local:/usr/bin:/bin';

my @found = ();		# Found plugin path names, by priority

my @myargv = @ARGV;	# Save the ARGV we want for ourselves.

my ($plugin) = @myargv; # First argument is a plugin name

die "munindoc: Please name a plugin\n" unless $plugin;

# un-taint plugin name
die "munindoc: Invalid plugin name '$plugin'\n" unless $plugin =~ /^([\w-]+)$/x;
$plugin = $1;

my $plugin_re = quotemeta($plugin);

local @ARGV=();

# Dirs in which to look for $plugin.pod and $plugin files.
my @DIRS = ("$Munin::Common::Defaults::MUNIN_LIBDIR/plugins",
	    "$Munin::Common::Defaults::MUNIN_CONFDIR/plugins");

File::Find::find({wanted => \&wanted_pod,      untaint => 1 }, @DIRS);
File::Find::find({wanted => \&wanted_basename, untaint => 1 }, @DIRS);

die "munin-doc: Plugin '$plugin' not found\n" if !@found;

my ($found_first) = @found;

# -F  The single Argument is file name, not module
push(@ARGV,'-F',$found_first);

# un-taint program name
$0 =~ /^(.*)$/x;
local $0 = $1;    ## no critic qw(RegularExpressions::ProhibitCaptureWithoutTest)

exit( Pod::Perldoc->run() );

sub wanted_pod {
    /^$plugin_re\.pod$/xso && push(@found,$File::Find::name);
    return;
}

sub wanted_basename {
    # un-taint full path
    $File::Find::name =~ /^(.*)$/x;
    push(@found,$1) if $_ eq $plugin;    ## no critic qw(RegularExpressions::ProhibitCaptureWithoutTest)
    return;
}


__END__

=head1 NAME

munin-doc - View Munin plugin documentation.

=head1 USAGE

munin-doc I<pluginname>

=head1 REQUIRED ARGUMENTS

The name of the plugin the documentation should be shown for.

=head1 OPTIONS

None.

=head1 EXIT STATUS

0 on success, non-zero otherwise.

=head1 CONFIGURATION

None needed.

=head1 DESCRIPTION

This program displays Munin documentation, esp. plugin documentation.
Note that not all plugins are documented yet.

Most Munin commands (such as munin-run, and munin-doc itself) is only
documented through the usual Unix man command.

=head1 PLUGIN DOCUMENTATION

The plugin documentation should include basic usage information,
anything you want to know about configuration, and how to interpret
the output.

Additional information typically found is usually the name of the
plugin author, licensing and "magic markers" which controls plugin
auto configuration (done by munin-node-configure).

If you want to document a plugin you can take a look at
http://munin-monitoring.org/wiki/munindoc for details on how to do it.

But all the work is handed off to the perldoc command once we have
located the Munin documentation files.

=head1 BUGS AND LIMITATIONS

None known. If you found one, please report under L<https://github.com/munin-monitoring/munin/issues>.

=head1 AUTHOR

  Copyright (C) 2008-2009 Nicolai Langfeldt, Linpro AS

=head1 LICENSE

GPLv2

=cut
