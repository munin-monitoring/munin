#!/bin/sh
# -*- sh -*-

: << =cut

=head1 NAME

ejabberd_ - Munin wildcard plugin to monitor ejabberd2

=head1 CONFIGURATION

As connected users, registered users and server-connections have
somewhat different scales, this plugin uses munins suggest feature to
create the following graphs:

ejabberd_connections

ejabberd_memory

ejabberd_registrations

ejabberd_statuses

ejabberd_threads

ejabberd_uptime

ejabberd_users

ejabberd_usersindays


If the autodetect-feature for vhosts breaks, you can set

=over 4

  [ejabberd_*]
    env.vhosts foo.com bar.com

=back

in a file in plugin-conf.d to override it.  ("user root" may also be
smart/not so smart depending on your setup).

For monitoring user statuses - define statuses environment variable:
(you can monitor only some of them)

=over 4

  [ejabberd_*]
    env.statuses available away chat xa

=back

For usersindays statistics define days environment variable.  Be
careful on high loaded servers, because it will plot all days in one
graph.

=over 4

  [ejabberd_*]
    env.days 1 7 30

=back

If your ejabberd.cfg cannot be found you can se it this way

=over 4

  [ejabberd_*]
    env.configfile /etc/ejabberd/ejabberd.cfg

=back

=head1 MAGIC MARKERS

  #%# family=contrib
  #%# capabilities=autoconf suggest

=head1 AUTHOR

Written by Lasse Karstensen <lkarsten@hyse.org>.  Based on
ejabberd-plugin by Christian Dr√∂ge <Christian@draugr.de>

Status, memory, threads, uptime, usersindays, ejabberd2 and other code
optimisation by Peter Viskup <skupko.sk@gmail.com>

=head1 LICENSE

Unknown

=head1 BUGS

Previously the documentation for this plugin mentioned RRDs limit on
data series names.  Munin works around this limit and the restriction
does not apply.

There is no way to configure the path to ejabberdctl.

=cut

EJCTL=$(which ejabberdctl 2>/dev/null)

if [ "$1" = "autoconf" ]; then
        if [ -n "$EJCTL" -a -x "$EJCTL" ]; then
                echo yes
                exit 0
        fi
        echo "no (ejabberdctl not found in path)"
        exit 0
fi

if [ "$1" = "suggest" ]; then
    echo "connections"
    echo "users"
    echo "registrations"
    echo "statuses"
    echo "memory"
    echo "threads"
    echo "usersindays"
    echo "uptime"
    exit 0
fi

# trying to autodetect running vhosts.
if [ -z "$vhosts" ]; then
    if [ -z "$configfile" ]; then
	for CFGPATH in /etc/ejabberd /etc/ejabber /usr/local/ejabberd/etc; do
            if [ -f "$CFGPATH/ejabberd.cfg" ]; then
		configfile=$CFGPATH/ejabberd.cfg;
            fi
	done
    fi
    if [ -z "$configfile" ]; then
        echo "Unable to find ejabberd.cfg. Exiting." >&2
        exit 1
    fi
    # you have to have all of vhosts defined on one line in $EJCFG or in plugins-conf.d/munin-node config file
    vhosts=$(awk '/^\s*{hosts/ {gsub( /\{\s?hosts\s?,|[\",\[\]]|\}\s?.|localhost/ ,""); print;}' $EJCFG);
fi

# get ejabberd PID
# in GNU/Linux Debian Lenny release the pidof command can be executed only by root
#EJPID=$(pidof -s /usr/lib/erlang/erts-5.6.3/bin/beam.smp)
EJPID=$(ps -ef | awk '/ejabberd/ && /\/bin\/beam(.smp)?/ {print $2}')

if [ -z "$vhosts" ]; then
    echo "No vhosts to sample." >&2
    echo "Please set env.vhosts in plugins-conf.d/munin-node." >&2
    exit 1
fi

MODE=`basename $0 | sed 's/^ejabberd_//g'`

if ! [ "$MODE" = "connections" -o "$MODE" = "users" \
  -o "$MODE" = "registrations" -o "$MODE" = "statuses" \
  -o "$MODE" = "memory" -o "$MODE" = "threads" \
  -o "$MODE" = "usersindays" -o "$MODE" = "uptime" ]; then
    echo "ERROR: Unknown mode \"$MODE\". Exiting." >&2
    exit 1
fi

if [ "$1" = "config" ]; then
    if [ "$MODE" = "memory" ]; then
        echo 'graph_args --base 1024 -l 0'
        echo 'graph_scale yes'
        echo 'graph_category ejabberd'
        echo 'graph_info This graph shows a statistic of ejabberd'
        echo 'graph_title Memory of ejabberd process'
        echo 'graph_vlabel Bytes'
        echo "ejabberd_memory_size.label actual memory";
        echo "ejabberd_memory_size.info Memory used by ejabberd process in Bytes";
        echo "ejabberd_memory_peak.label memory peak";
        echo "ejabberd_memory_peak.info Memory peak of ejabberd process in Bytes";
    else
    echo 'graph_args --base 1000 -l 0'
    echo 'graph_scale no'
    echo 'graph_category ejabberd'
    echo 'graph_info This graph shows a statistic of ejabberd'

    if [ "$MODE" = "connections" ]; then
        echo 'graph_title Server-to-server conections'
        echo 'graph_vlabel s2s'
        echo 's2s_connections_out.label incoming s2s connections'
        echo 's2s_connections_out.info Number of outgoing server to server connections'
        echo 's2s_connections_in.label outgoing s2s connections'
        echo 's2s_connections_in.info Number of incoming server to server connections'
    elif [ "$MODE" = "users" ]; then
        echo 'graph_title Connected users'
        echo 'graph_vlabel users'
        for host in $vhosts; do
            formathost=$(echo $host | tr '.' '_' | tr '-' '_')
            echo "connected_users_$formathost.label $host connected users";
            echo "connected_unique_users_$formathost.label $host unique connected users";
        done;
    elif [ "$MODE" = "registrations" ]; then
        echo 'graph_title Number of registered users'
        echo 'graph_vlabel users'
        for host in $vhosts; do
            formathost=$(echo $host | tr '.' '_' | tr '-' '_')
            echo "registered_$formathost.label $host registered users";
            echo "registered_$formathost.info Registered users for vhost $host"
        done;
    elif [ "$MODE" = "statuses" ]; then
        echo 'graph_title Users with statuses'
        echo 'graph_vlabel users'
        for host in $vhosts; do
                for status in $statuses; do
                        formathost=$(echo $host | tr '.' '_' | tr '-' '_')
                   echo "status_${formathost}_${status}.label $status on $host";
                        echo "status_${formathost}_${status}.info Number of users with status $status on $host [available, away, xa=not available, dnd=(do not disturb) or (busy), chat=free for chat]";
                done;
        done;
    elif [ "$MODE" = "threads" ]; then
        echo 'graph_title Threads of ejabberd process'
        echo 'graph_vlabel threads'
        echo "ejabberd_threads.label number of threads";
        echo "ejabberd_threads.info Number of threads of ejabberd process";
    elif [ "$MODE" = "usersindays" ]; then
        echo 'graph_title Active users in last days'
        echo 'graph_vlabel users'
        for host in $vhosts; do
                for num in $days; do
                        formathost=$(echo $host | tr '.' '_' | tr '-' '_')
                        echo "usersindays_${formathost}_${num}.label active users on $host in last $num days";
                        echo "usersindays_${formathost}_${num}.info Number of users active on $host in last $num days";
                done;
        done;
    elif [ "$MODE" = "uptime" ]; then
        echo 'graph_title Uptime of ejabberd server'
        echo 'graph_vlabel uptime in days'
        echo "uptime.label uptime"
        echo 'uptime.draw AREA'
    fi
    fi
    exit 0
fi

if [ "$MODE" = "connections" ]; then
    echo "s2s_connections_out.value $($EJCTL outgoing-s2s-number)"
    echo "s2s_connections_in.value $($EJCTL incoming-s2s-number)"
    exit 0
fi

if [ "$MODE" = "users" ]; then
    for host in $vhosts; do
        formathost=$(echo $host | tr '.' '_' | tr '-' '_')
        echo "connected_users_$formathost.value $($EJCTL stats-host onlineusers $host)";
        echo "connected_unique_users_$formathost.value $($EJCTL connected-users | awk -v var=$host -v count=0 -F/ '{users[$1]} END {for (user in users) {if (index(user,var)) {count++}} print count}')";
    done
    exit 0
fi

if [ "$MODE" = "registrations" ]; then
    for host in $vhosts; do
        formathost=$(echo $host | tr '.' '_' | tr '-' '_')
        num=$($EJCTL stats-host registeredusers $host)
        if [ "$?" != 0 ]; then
            num="U"
        fi
        echo "registered_$formathost.value $num";
    done
    exit 0
fi

if [ "$MODE" = "statuses" ]; then
   for host in $vhosts; do
        formathost=$(echo $host | tr '.' '_' | tr '-' '_')
                for status in $statuses; do
                        num=$($EJCTL status-num-host $host $status)
                        if [ "$?" != 0 ]; then
                                num="U"
                        fi
                        echo "status_${formathost}_${status}.value $num";
                done
         done
    exit 0
fi

if [ "$MODE" = "memory" ]; then
    echo "ejabberd_memory_size.value $(awk '/VmSize/ {print $2*1024}' /proc/${EJPID}/status)"
    echo "ejabberd_memory_peak.value $(awk '/VmPeak/ {print $2*1024}' /proc/${EJPID}/status)"
    exit 0
fi

if [ "$MODE" = "threads" ]; then
    echo "ejabberd_threads.value $(awk '/Threads/ {print $2}' /proc/${EJPID}/status)"
    exit 0
fi

if [ "$MODE" = "usersindays" ]; then
        for host in $vhosts; do
                for num in $days; do
                        formathost=$(echo $host | tr '.' '_' | tr '-' '_')
                        echo "usersindays_${formathost}_${num}.value $($EJCTL num-active-users $host $num)";
                done;
        done;
        exit 0
fi

if [ "$MODE" = "uptime" ]; then
        echo "uptime.value $($EJCTL stats uptimeseconds | awk '{printf "%.2f", $1/86400}')"
fi
