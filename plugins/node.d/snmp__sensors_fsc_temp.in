#!@@PERL@@ -w
# -*- perl -*-
# vim: ft=perl
#
# Copyright (C) 2004 Dagfinn Ilmari Mannsaaker
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#
# Plugin to fetch temperature data from the ServerView SNMP agent on
# Fujitsu Simens servers
#
#%# family=snmpauto
#%# capabilities=snmpconf

use strict;

use Net::SNMP qw(oid_lex_sort);
use Munin::Plugin::SNMP;

# The OIDs we're after
my $tempBase = '1.3.6.1.4.1.231.2.10.2.2.5.2.1.1';

# Subtables
my $tempCabinetId          = 1;
my $tempSensorNumber       = 2;
my $tempSensorStatus       = 3;
my $tempSensorPurpose      = 4;
my $tempUpperWarningLevel  = 6;
my $tempUpperCriticalLevel = 8;
my $tempCurrentValue       = 11;
my $tempSensorDesignation  = 13;

# Magic values
my $tempSensorUnknown = 1;
my $tempSensorDisabled = 2;
my $tempSensorUnavailable = 99;

if (defined $ARGV[0] and $ARGV[0] eq 'snmpconf') {
    print "require $tempBase.\n";
    # Require known, enabled and available sensors
    print "require $tempBase.$tempSensorStatus. ^[3-9]|[1-8][0-9]|9[0-8]\$\n";

    exit 0;
}


my ($session, $error) = Munin::Plugin::SNMP->session();

if ($error) {
    die "# Error: $error\n";
}

my $temps =  $session->get_hash(-baseoid => $tempBase,
				-cols    => { $tempCabinetId          => 'cabinet',
					      $tempSensorNumber       => 'number',
					      $tempSensorStatus       => 'status',
					      $tempSensorPurpose      => 'purpose',
					      $tempUpperWarningLevel  => 'warning',
					      $tempUpperCriticalLevel => 'critical',
					      $tempCurrentValue       => 'value',
					      $tempSensorDesignation  => 'label',
					    },
			       ) or die $session->error();

for my $key (keys %$temps) {
    my $temp = $temps->{$key};
    $temp->{info} = "Cabinet $temp->{cabinet} sensor $temp->{number}";
    # Delete sensors with status unknown, disabled or unavailable
    delete $temps->{$key}
      if $temp->{status} == $tempSensorUnknown ||
	$temp->{status} == $tempSensorDisabled ||
	$temp->{status} == $tempSensorUnavailable;
}

if (defined $ARGV[0] and $ARGV[0] eq 'config') {
    print <<EOM;
graph_title Temperatures
graph_args -l 0
graph_vlabel degrees Celcius
graph_category sensors
EOM
    print 'graph_order ', join(' ', map { get_id($_) } oid_lex_sort keys %$temps), "\n";
    print 'host_name ', $session->hostname(), "\n"
      unless $session->hostname eq 'localhost';
      
    for my $sensor (keys %$temps) {
	my $id = get_id($sensor);
	for my $key (qw(label warning critical info)) {
	    print "$id.$key $temps->{$sensor}->{$key}\n";
	}
	print "$id.type GAUGE\n";
    }
} else {
    print get_id($_), '.value ', $temps->{$_}{value}, "\n"
      for keys %$temps;
}

sub get_id {
    (my $id = shift) =~ tr/\./_/;
    return 'temp'.$id;
}
