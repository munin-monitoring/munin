#!@@PERL@@
# -*- perl -*-

=head1 NAME

amavis - plugin to monitor the amavis mail filter

=head1 APPLICABLE SYSTEMS

Hosts running amavis

=head1 CONFIGURATION

Configuration parameters for @@CONFDIR@@/amavis,
if you need to override the defaults below:

 [amavis]
  env.logdir  - Which logfile to use
  env.logfile - What file to read in logdir

=head2 DEFAULT CONFIGURATION

 [amavis]
  env.logdir  /var/log
  env.logfile mail.log

=head1 AUTHOR

Ported to Perl from the original shell script by Mark Meyer.

=head1 LICENSE

GPLv2

=head1 MAGIC MARKERS

=begin comment

These magic markers are used by munin-node-configure when installing
munin-node.

=end comment

 #%# family=manual
 #%# capabilities=autoconf

=cut

use strict;
use warnings;

use Munin::Plugin;

my $LOGDIR  = (defined($ENV{'logdir'}) ? $ENV{'logdir'} : '/var/log');
my $LOGFILE = (defined($ENV{'logdir'}) ? $ENV{'logfile'} : 'mail.info');

my $logfile = "$LOGDIR/$LOGFILE";

if ( defined($ARGV[0]) and $ARGV[0] eq "autoconf" )
{
    if (-d $LOGDIR)
    {
	if (-f $logfile)
	{
            if (-r $logfile)
            {
                print "yes\n";
                exit 0;
            }
            else
            {
                print "no (logfile '$logfile' not readable)\n";
            }
	}
	else
	{
	    print "no (logfile '$logfile' not found)\n";
	}
    }
    else
    {
        print "no (could not find logdir '$LOGDIR')\n";
    }

    exit 0;
}

if ( $ARGV[0] and $ARGV[0] eq "config" )
{
    print "graph_title Amavis filter statistics\n";
    print "graph_vlabel \\#\n";
    print "graph_category antivirus\n";

    print "virus.label virus\n";
    print "virus.info Number of viruses caught in email\n";
    print "spam_maybe.label probably spam\n";
    print "spam_maybe.info Emails amavis thinks probably contain spam\n";
    print "spam_sure.label surely spam\n";
    print "spam_sure.info Emails amavis is sure to contain spam\n";
    print "total.label total mails\n";
    print "total.info Total emails evaluated by amavis\n";
    exit 0;
}

if (! -f $logfile) 
{
    print "virus.value U\n";
    print "spam_maybe.value U\n";
    print "spam_sure.value U\n";
    print "total.value U\n";
    exit 0;
}

my ($pos, $virus, $spam_maybe, $spam_sure, $total) = restore_state();

$virus = 0 unless defined($virus);
$spam_maybe = 0 unless defined($spam_maybe);
$spam_sure = 0unless defined($spam_sure);
$total = 0 unless defined($total);

my $startsize = (stat $logfile)[7];

if (!defined $pos)
{
    # Initial run.
    $pos = $startsize;
}

$pos = parseLogfile($logfile, $pos, $startsize);

print "virus.value $virus\n";
print "spam_maybe.value $spam_maybe\n";
print "spam_sure.value $spam_sure\n";
print "total.value $total\n";

save_state($pos, $virus, $spam_maybe, $spam_sure, $total);

sub parseLogfile 
{    
    my ($fname, $start, $stop) = @_;

	my ($logfd, $reset) = tail_open($fname, $start);

    while (tell($logfd) < $stop) 
    {
	my $line = <$logfd>;
	chomp ($line);

	if ($line =~ /Hits:/) 
	{
	    $total++;
	} 
	elsif ($line =~ /INFECTED.*Hits:/)
	{
	    $virus++;
	}
	elsif ($line =~ /SPAMMY.*Hits:/)
	{
		$spam_maybe++;
	}
	elsif ($line =~ /SPAM .*Hits:/)
	{
		$spam_sure++;
	}
    }
    return tail_close($logfd);
}

# vim:syntax=perl
