#!@@PERL@@
# -*- perl -*-

=head1 NAME

postfix_mailvolume - Plugin to monitor the volume of mails delivered
  by postfix.

=head1 APPLICABLE SYSTEMS

Any postfix.

=head1 CONFIGURATION

The following shows the default configuration.

  [postfix*]
    env.logdir /var/log
    env.logfile syslog
    env.postconf postconf

=head1 INTERPRETATION

The plugin shows the number of bytes of mail that has passed through
the postfix installation.

=head1 MAGIC MARKERS

  #%# family=auto
  #%# capabilities=autoconf

=head1 BUGS

None known

=head1 VERSION

 $Id$

=head1 AUTHOR

Copyright (C) 2002-2008.

No author is documented.

=head1 LICENSE

GPLv2

=cut

use strict;
use warnings;
use Munin::Plugin;

my $pos   = undef;
my $volume = 0;
my $LOGDIR  = (defined($ENV{'logdir'}) ? $ENV{'logdir'} : '/var/log');
my $LOGFILE = (defined($ENV{'logfile'}) ? $ENV{'logfile'} : 'syslog');
my $POSTCONF = $ENV{'postconf'} || 'postconf';
my $logfile = "$LOGDIR/$LOGFILE";

sub parseLogfile {
    my ($fname, $start) = @_;

    my ($LOGFILE,$rotated) = tail_open($fname,$start);

    my $line;

    while ($line =<$LOGFILE>) {
	chomp ($line);

	if ($line =~ /qmgr.*from=.*size=([0-9]+)/) {
	    $volume += $1;
	}
    }
    return tail_close($LOGFILE);
}

if ( $ARGV[0] and $ARGV[0] eq "autoconf" ) {

    `which $POSTCONF >/dev/null 2>/dev/null`;
    if (!$?)
    {
        my (undef, $s) = testfile($logfile,"autoconf");
        print "$s\n"
    }
    else
    {
	    print "no (postfix not found)\n";
    }
    exit 0;
}


if ( $ARGV[0] and $ARGV[0] eq "config" ) {
    print "graph_title Postfix bytes throughput\n";
    print "graph_args --base 1000 -l 0\n";
    print "graph_vlabel bytes / \${graph_period}\n";
    print "graph_scale yes\n";
    print "graph_category postfix\n";
    print "volume.label throughput\n";
    print "volume.type DERIVE\n";
    print "volume.min 0\n";
    exit 0;
}


if (! -f $logfile) {
    print "volume.value U\n";
    exit 1;
}

($pos,$volume) = restore_state();

$volume = 0 unless defined($volume);

my $startsize = (stat $logfile)[7];
# Initial run.
$pos = $startsize unless defined($pos);

if ($startsize < $pos)
{
    # Log rotated
    my $rotlogfile = rotlog($logfile);
    if ( testfile($rotlogfile))
    {
        parseLogfile($rotlogfile, $pos, (stat $rotlogfile)[7]);
    }
    $pos = 0;
}

$pos = parseLogfile($logfile, $pos);

print "volume.value $volume\n";

save_state($pos,$volume);

# vim:syntax=perl
