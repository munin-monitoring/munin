#!@@PERL@@ -w
# -*- perl -*-

=head1 NAME

asterisk_voicemail - Plugin to monitor number of messages in all
voicemail boxes

=head1 ABOUT

This plugin uses the asterisk manager API to fetch data.

=head1 CONFIGURATION

The following configuration parameters are used by this plugin

 [asterisk_voicemail]
  env.host     - hostname to connect to
  env.port     - port number to connect to
  env.username - username used for authentication
  env.secret   - secret used for authentication

The "username" and "secret" parameters are mandatory, and have no
defaults.

=head2 DEFAULT CONFIGURATION

 [asterisk_voicemail]
  env.host 127.0.0.1
  env.port 5038

=head1 AUTHOR

Copyright (C) 2005-2006 Rodolphe Quiedeville <rodolphe@quiedeville.org>

=head1 LICENSE

Gnu GPLv2

=begin comment

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; version 2 dated June,
1991.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

If you improve this script please send your version to my email address
with the copyright notice upgrade with your name.

=end comment

=head1 MAGIC MARKERS

 #%# family=contrib

=cut

use IO::Socket;
use strict;

if ($ARGV[0] and $ARGV[0] eq "config")
{
    print "graph_title Asterisk Voicemail messages\n";
    print "graph_args --base 1000 -l 0\n";
    print "graph_vlabel messages\n";
    print "graph_category asterisk\n";
    print "messages.draw AREA\n";
    print "messages.label messages\n";
    exit 0;
}

my $host = exists $ENV{'host'} ? $ENV{'host'} : "127.0.0.1";
my $port = exists $ENV{'port'} ? $ENV{'port'} : "5038";

my $username = $ENV{'username'};
my $secret   = $ENV{'secret'};

my $pop = new IO::Socket::INET (PeerAddr => $host,
				PeerPort => $port,
				Proto => 'tcp');
die "Could not create socket: $!\n" unless $pop;

## Read connection message.
my $line = $pop->getline;
die $line unless $line =~ /^Asterisk/;

## Send user name.
$pop->print("Action: login\n");
$pop->print("Username: $username\n");
$pop->print("Secret: $secret\n");
$pop->print("Events: off\n");
$pop->print("\n");

#Response: Success
#Message: Authentication accepted

## Request status of messages.
$pop->print("Action: command\n");
$pop->print("Command: voicemail show users\n");
$pop->print("\n");

#Context    Mbox  User                      Zone       NewMsg
#default    1234  Example Mailbox                           1
#other      1234  Company2 User                             0

my ($results,$start)=(0,0);

my @fields;
while (($line = $pop->getline)  and ($line !~ /--END/o))
{
    if ($start) {
	@fields = (split ' ', $line);	
	$results = $results + pop(@fields);
    }

    $start = 1 if ($line =~ /Context/o);
}

# Logoff
$pop->print("Action: logoff\n");
$pop->print("\n");

## Exhaust buffer before closing (to avoid polluting Asterisk's logs)
while ($line = $pop->getline) {}

print "messages.value $results\n";
# vim:syntax=perl
