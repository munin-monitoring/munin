#!@@PERL@@
# -*- perl -*-

=head1 NAME

spamstats - Plugin to graph spamassassin throughput

=head1 CONFIGURATION

Configuration parameters for @@CONFDIR@@/spamstats,
if you need to override the defaults below:

 [spamstats]
  env.logdir  - Which logfile to use
  env.logfile - What file to read in logdir
  env.spamd - Path to spamd binary

=head2 DEFAULT CONFIGURATION

 [spamstats]
  env.logdir  /var/log
  env.logfile mail.log

=head1 AUTHOR

Unknown author

=head1 LICENSE

GPLv2

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf

=cut

use strict;

use Munin::Plugin;

my $LOGDIR  = (defined($ENV{'logdir'}) ? $ENV{'logdir'} : '/var/log');
my $LOGFILE = (defined($ENV{'logfile'}) ? $ENV{'logfile'} : 'mail.log');
my $SPAMD = (defined($ENV{'spamd'}) ? $ENV{'spamd'} : 'spamd');
my $logfile = "$LOGDIR/$LOGFILE";

if ( defined($ARGV[0]) and $ARGV[0] eq "autoconf" )
{
    `which $SPAMD >/dev/null 2>/dev/null`;
    if (!$?)
    {
        my (undef, $s) = testfile($logfile,"autoconf");
        print "$s\n"
    }
    else
    {
        print "no (could not find spamassasin)\n";
    }
    exit 0;
}

if ( $ARGV[0] and $ARGV[0] eq "config" )
{
    print "host_name $ENV{FQDN}\n";
    print "graph_title SpamAssassin throughput\n";
    print "graph_args --base 1000 -l 0\n";
    print "graph_period minute\n";
    print "graph_vlabel mails / \${graph_period}\n";
    print "graph_order ham spam\n";
    print "ham.label ham\n";
    print "ham.type DERIVE\n";
    print "ham.min 0\n";
    print "ham.draw AREA\n";
    print "spam.label spam\n";
    print "spam.type DERIVE\n";
    print "spam.min 0\n";
    print "spam.draw STACK\n";
    exit 0;
}

my $rotlogfile = rotlog($logfile);
if (! -f $logfile and ! -f $rotlogfile)
{
    print "ham.value U\n";
    print "spam.value U\n";
    exit 0;
}

my ($pos, $ham, $spam) = restore_state();

$ham = 0 unless defined($ham);
$spam = 0 unless defined($spam);

my $startsize = (stat $logfile)[7];
# Initial run.
$pos = $startsize unless defined($pos);

if ($startsize < $pos)
{
    # Log rotated
    if ( testfile($rotlogfile))
    {
        parseLogfile($rotlogfile, $pos, (stat $rotlogfile)[7]);
    }
    $pos = 0;
}

$pos = parseLogfile($logfile, $pos, $startsize);

print "ham.value $ham\n";
print "spam.value $spam\n";

save_state($pos, $ham, $spam);

sub parseLogfile
{
    my ($fname, $start, $stop) = @_;
    my ($logfd, undef) = tail_open($fname, $start);

    while (tell($logfd) < $stop)
    {
        my $line =<$logfd>;
        chomp ($line);

        if ($line =~ m/clean message/)
        {
            $ham++;
        }
        elsif ($line =~ m/identified spam/)
        {
            $spam++;
        }
    }
    return tail_close($logfd);
}
