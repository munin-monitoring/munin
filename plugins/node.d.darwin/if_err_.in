#!@@GOODSH@@
# -*- sh -*-

: << =cut

=head1 NAME

if_err_ - Wildcard-plugin to monitor errors on network interfaces

=head1 CONFIGURATION

=head2 WILDCARD PLUGIN

This is a wildcard plugin.  To monitor an interface, link
if_err_<interface> to this file. E.g.

  ln -s /usr/share/node/node/plugins-auto/if_err_ \
        /etc/munin/node.d/if_err_en0

...will monitor en0.

=head1 NOTES

Any device found in netstat -ib can be monitored. Examples include
en*, fw* and lo (the latter is not monitored by default). 
Please note that aliases cannot be monitored with this plugin.

=head1 AUTHOR

Unknown author

=head1 LICENSE

Unknownl LICENSE

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf suggest

=cut

INTERFACE=${0##*if_err_}

findspeed () {

    # Who whould have thought it's so much work to determine the
    # maximum speed of a network interface.  Buckle up!

    IWLIST="$(type -p iwlist)"

    WIRELESS=0
    # Do not use interface name to guess technology.  Many many
    # wifi drivers use "eth*" names.
    case $IWLIST in

	'')
            # Used to use iwconfig to look for "no wireless
            # extentions" message - but this seemed un-needed.  If we
            # don't have iwlist we can't find out if # the interface
            # is wireless
            :;;
	*)  IWO="$($IWLIST $INTERFACE rate 2>&1)"
            case $IWO in
                *no*) :;;
	        *) WIRELESS=1;;
	    esac
	    ;;
    esac

    SPEED=U
    # Find speed in Mbps. - or not
    case $WIRELESS:$IWLIST in
	0:*)
	    ETHTOOL="$(type -p ethtool)"
	    if [ -x "$ETHTOOL" ]; then
		SPEED="$($ETHTOOL $INTERFACE |
                         awk '/Speed:/ { gsub(/[^0-9]*/,"",$2); print $2; }')"
		case $SPEED in
		    [0-9]*) :;; # OK
		    *)      SPEED=U;; # Could be "unknown"
		esac
	    else
		INSTALL="ethtool"
	    fi
	    ;;
	1:/*)
	    # Current bit rate is not very interesting, it varies too often
	    SPEED=$(echo "$IWO" |
		    awk 'BEGIN { RATE=U }
                               { if ($2 == "Mb/s") RATE=$1; } 
                         END   { print RATE; }')

	    ;;
	*)
	    # Wireless interface, cannot find iwlist
	    INSTALL="wireless-tools"
	    ;;
    esac

    MIITOOL="$(type -p mii-tool)"
    case $SPEED:$MIITOOL in
	U:/*)
	    SPEED="$($MIITOOL $INTERFACE 2>&1)"
	    case $SPEED in
		*1000base*) SPEED=1000;; # as if...
		*100base*)  SPEED=100;;
		*10base*)   SPEED=10;;
		*)          SPEED=U;;
	    esac
	    ;;
    esac

    case $SPEED in
	U) echo "up.info Traffic of the $INTERFACE interface. Unable to determine interface speed."
	   return;;
    esac

    BPS=$(( $SPEED * 1000 * 1000 ))

    cat <<EOF
up.max $BPS
up.info Traffic of the $INTERFACE interface. Maximum speed is $SPEED Mbps.
down.max $BPS
EOF

    return
}


case $1 in
    autoconf)
	if ( type -p netstat >/dev/null ); then
	    echo yes
	    exit 0
	else
	    echo "no (netstat not found)"
	    exit 0
	fi
	;;
    suggest)
	if ( type -p netstat >/dev/null ); then
	    netstat -ib | awk '$3 ~ /Link/ && $1 !~ /(Name|lo|gif|stf)/ && $5 != "0" && $7 != "0" { print $1 }'
	fi
	exit 0
	;;
    config)
		       
	echo "graph_order down up" 
        echo "graph_title $INTERFACE errors"
        echo 'graph_args --base 1000'
        echo 'graph_vlabel packets in (-) / out (+) per ${graph_period}'
        echo 'graph_category network'
        echo "graph_info This graph shows the amount of errors on the $INTERFACE network interface."
        echo 'down.label packets'
        echo 'down.type COUNTER'
        echo 'down.graph no'
        echo 'down.warning 1'
        echo 'up.label packets'
        echo 'up.type COUNTER'
        echo 'up.negative down'
        echo 'up.warning 1'

	findspeed

	exit 0
	;;
esac

# Escape dots in the interface name (eg. vlans) before using it as a regex
# Name  Mtu   Network       Address            Ipkts Ierrs     Ibytes    Opkts Oerrs     Obytes  Coll
# en1   1500  <Link#5>    00:17:f2:e8:f8:3c 11548082 38116  702690133 22938005   170 16013565627     0
netstat -ib -I "$INTERFACE" | awk -v interface="$INTERFACE" \
    '$3 ~ /Link/ { print "down.value " $6 "\nup.value " $9 }'

