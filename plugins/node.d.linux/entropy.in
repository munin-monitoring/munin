#!@@PERL@@
# -*- cperl -*-

=head1 NAME

entropy - Plugin to monitor available entropy

=head1 CONFIGURATION

No configuration

=head1 AUTHOR

Copyright (C) 2013 Diego Elio Petten√≤
Rewritten from unknown author

=head1 LICENSE

GPLv2

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf

=cut

use strict;
use Munin::Plugin;

my ($entropy) = readarray("/proc/sys/kernel/random/entropy_avail");

if ( defined $ARGV[0] and $ARGV[0] eq 'autoconf' ) {
  if ( $entropy ) {
    print "yes\n";
  } else {
    print "no\n";
  }

  exit 0;
} elsif ( defined $ARGV[0] and $ARGV[0] eq 'config' ) {
  my ($poolsize) = readfile("/proc/sys/kernel/random/poolsize");
  my $upper = $poolsize ? "-u $poolsize" : "";

  print <<END;
graph_title Available entropy
graph_args --base 1024 -l 0 $upper
graph_vlabel bytes
graph_scale no
graph_category system
graph_info This graph shows the amount of entropy available in the system.
entropy.label entropy
entropy.info The number of random bytes available. This is typically used by cryptographic applications.
entropy.min 0
END

  if ( $poolsize ) {
    print "entropy.max $poolsize\n"
  }

  print_thresholds("entropy");

  unless ( ($ENV{MUNIN_CAP_DIRTYCONFIG} || 0) == 1 ) {
    exit 0;
  }
}

print "entropy.value $entropy\n";
