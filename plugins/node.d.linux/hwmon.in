#!@@PERL@@
# -*- cperl -*-

=head1 NAME

  hwmon - Multigraph plugin to monitor Linux hwmon drivers

=head1 APPLICABLE SYSTEMS

Any Linux system with a modern kernel (2.6.something), with an
accessible C</sys> filesystem and available drivers for hardware
monitoring.

Different kernels expose more or fewer probes through the C</sys>
hwmon interfaces, but at least the recent 3.6 kernels expose the
following:

 - hardware sensors (also accessible via lm_sensors);
 - CPU core probes (Intel and AMD at least);
 - CPU power probes (AMD);
 - ACPI thermal zones (most x86/AMD64 CPUs);
 - video card temperatuers (open-source drivers).

The specifications, and this plugin, include support for voltage
input, fan speed, temperature, current, power and humidity.

Please note that on server-grade hardware, sensors are usually
implemented through IPMI, which the kernel does not expose to
userspace directly. For those systems, please refer to the C<freeipmi>
plugin.

=head1 CONFIGURATION

There is no environment configuration for this plugin on the node
side. If you need to ignore some values, do so from the master
directly.

The data is being received directly by the kernel-configured
parameters. Some of these parameters are initialized by lm_sensors
depending on your driver and distribution, so while the plugin does
not require you to have the package installed, it's still suggested.

=head1 AUTHOR

Copyright (c) 2012-2013 Diego Elio Petten√≤ <flameeyes@flameeyes.eu>

=head1 LICENSE

GPLv2

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf

=cut

use strict;
use Munin::Plugin;
use File::Basename;

# we'll opent he hwmon class, then find all the devices registered
# there.
my $classdir = '/sys/class/hwmon';
my @devdirs = <$classdir/hwmon*>;

if ( defined $ARGV[0] and $ARGV[0] eq 'autoconf' ) {
  if ( scalar(@devdirs) > 0 ) {
    print "yes\n";
  } else {
    print "no (no hwmon device found)\n";
  }

  exit 0;
}

my %sensors = (
	     in => {
		    inputs => [],
		    title => "Voltages",
		    vlabel => "Volt",
		    graph_args => "--base 1000 --logarithmic",
		    denominator => 1000 # milliVolt -> Volt
		   },
	     fan => {
		     inputs => [],
		     title => "Fans speed",
		     vlabel => "RPM",
		     graph_args => "--base 1000 -l 0",
		     denominator => 1
		    },
	     temp => {
		      inputs => [],
		      title => "Temperatures",
		      vlabel => "Degrees Celsius",
		      graph_args => "--base 1000 -l 0",
		      denominator => 1000 # milliCelsius -> Celsius
		     },
	     curr => {
		      inputs => [],
		      title => "Currents",
		      vlabel => "A",
		      graph_args => "--base 1000 -l 0",
		      denominator => 1000 # milliAmperes -> Amperes
		     },
	     power => {
		       inputs => [],
		       title => "Power",
		       vlabel => "W",
		       graph_args => "--base 1000 -l 0",
		       denominator => 1000000 # microWatts -> Watts
		      },
	     humidity => {
			  inputs => [],
			  title => "Humidity",
			  vlabel => "%",
			  graph_args => "--base 1000 -l 0 -u 100",
			  denominator => 1
			 }
	    );

foreach my $devdir (@devdirs) {
  my $devname = basename($devdir);

  # we have to find where the actual data is. Unfortunately some
  # drivers use /sys/class/hwmon/hwmon* directly while most use
  # /sys/class/hwmon/hwmon*/device.
  if (-e "$devdir/device/name") {
    $devdir = "$devdir/device";
  } elsif (! -e "$devdir/name") {
    next;
  }

  my ($devlabel) = readarray("$devdir/name");

  foreach my $input (<$devdir/*_input>) {
    basename($input) =~ /^(([a-z]+)[0-9]+)_input$/;
    my $name = $1;
    my $type = $2;
    my $graphid = clean_fieldname("$devname $name");
    my $path = "$devdir/$name";
    my $label = ($devlabel || "") . " $name";

    push(@{$sensors{$type}->{inputs}}, { path => $path, label => $label, graphid => $graphid });
  }
}

if ( defined $ARGV[0] and $ARGV[0] eq 'config' ) {
  foreach my $type (keys %sensors) {
    # don't print anything if no value is found
    next if scalar(@{$sensors{$type}->{inputs}}) == 0;

    print <<END;

multigraph hwmon_$type
graph_title $sensors{$type}->{title}
graph_vlabel $sensors{$type}->{vlabel}
graph_args $sensors{$type}->{graph_args}
graph_category sensors
END

    foreach my $sensor (@{$sensors{$type}->{inputs}}) {
      my ($label) = readarray("$sensor->{path}_label");
      print $sensor->{graphid}, ".label ", ($label || $sensor->{label}), "\n";

      my ($lwarn) = readarray("$sensor->{path}_min");
      $lwarn = $lwarn/$sensors{$type}->{denominator} if $lwarn;

      my ($hwarn) = readarray("$sensor->{path}_max");
      $hwarn = $hwarn/$sensors{$type}->{denominator} if $hwarn;

      print "$sensor->{graphid}.warning $lwarn:$hwarn\n" if $lwarn || $hwarn;

      my ($lcrit) = readarray("$sensor->{path}_lcrit");
      $lcrit = $lcrit/$sensors{$type}->{denominator} if $lcrit;

      my ($hcrit) = readarray("$sensor->{path}_crit");
      $hcrit = $hcrit/$sensors{$type}->{denominator} if $hcrit;

      print "$sensor->{graphid}.critical $lcrit:$hcrit\n" if $lcrit || $hcrit;
    }
  }

  unless ( ($ENV{MUNIN_CAP_DIRTYCONFIG} || 0) == 1 ) {
    exit 0;
  }
}

foreach my $type (keys %sensors) {
  # don't print anything if no value is found
  next if scalar(@{$sensors{$type}->{inputs}}) == 0;

  print "multigraph hwmon_$type\n";

  foreach my $sensor (@{$sensors{$type}->{inputs}}) {
    my ($val) = readarray("$sensor->{path}_input");
    $val /= $sensors{$type}->{denominator} if $val;
    print $sensor->{graphid}, ".value ", ($val || "U"), "\n";
  }
}

# vim:syntax=perl
