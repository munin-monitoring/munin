#!@@PERL@@ -T
# -*- cperl -*-

=begin comment

Copyright (C) 2013 Steve Schnepp

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; version 2 dated June,
1991.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=end comment

=cut

use strict;
use warnings;


use CGI::Fast qw(:cgi);
use CGI::Carp qw(fatalsToBrowser);

use POSIX;
use HTML::Template::Pro;

use Munin::Master::Utils;

use Munin::Master::Logger;
use Log::Log4perl qw( :easy );

use Data::Dumper;

my @times = qw(day week month year);

while (new CGI::Fast) {
	my $path = path_info();

	# Force a trailing / on overview, to enable simpler url handling: it is like in
	# a subdir from the browser pov
	if ($path eq "") {
		print header(
			-status => 301,
			-Location => (script_name() . "/"),
			-Cache_Control => "public, max-age=14400",  # Cache is valid of 1 day
		);
		next;
	}

	# Remove now the leading "/" as *every* path will have it
	$path =~ s,^/,,;

	# Handle static page now, since there is no need to do any SQL
	if ($path =~ m/static\/(.+)$/) {
		# Emit the static page
		my $page = $1;
		my ($ext) = ($page =~ m/.*\.([^.]+)$/);
		my %mime_types = (
			css => "text/css",
			html => "text/html",
			png => "image/png",
			jpg => "image/jpeg",
			jpeg => "image/jpeg",
			js => "application/javascript",
		);

		my $filename = get_param("staticdir"). "/$page";
		my $fh = new IO::File("$filename");

		if (! $fh) {
			print header( -status => 404);
			next;
		}

		print header( -status => 200, -type => $mime_types{$ext});
		while (my $line = <$fh>) { print $line; }
		next;
	}

	# Short evaluate the GRAPH png pages
	if ($path =~ m/-(day|week|month|year).png$/) {
		my $url = script_name() . "/../munin-cgi-graph" . path_info();
		print header(
			-status => 301,
			-Location => $url,
			-Cache_Control => "public, max-age=14400",  # Cache is valid of 1 day
		);
		next;
	}

	# Ok, now SQL is needed to go further
        use DBI;
	my $datafilename = "$Munin::Common::Defaults::MUNIN_DBDIR/datafile.sqlite";
        my $dbh = DBI->connect("dbi:SQLite:dbname=$datafilename","","") or die $DBI::errstr;

	my $template_filename;
	my %template_params = (
		MUNIN_VERSION	=> $Munin::Common::Defaults::MUNIN_VERSION,
		TIMESTAMP       => strftime("%Y-%m-%d %T%z (%Z)", localtime),
		R_PATH		=> script_name(),
	);

	# Common Navigation params
	###################

	# Problems nav
	{
		my $sth = $dbh->prepare_cached("SELECT SUM(critical), SUM(warning), SUM(unknown) FROM ds");
		$sth->execute();
		my ($critical, $warning, $unknown) = $sth->fetchrow_array;
		$template_params{NCRITICAL} = $critical;
		$template_params{NWARNING} = $warning;
		$template_params{NUNKNOWN} = $unknown;
	}

	# Groups nav
	{
		my $sth = $dbh->prepare_cached("SELECT g.name, u.path FROM grp g INNER JOIN url u ON u.id = g.id AND u.type = 'group'");
		$sth->execute();

		my $rootgroups = [];
		while (my ($_name, $_path) = $sth->fetchrow_array) {
			push @$rootgroups, { NAME => $_name, URL => $_path };
		}
		$template_params{ROOTGROUPS} = $rootgroups;
	}

	# Categories nav
	{
		my $sth = $dbh->prepare_cached("SELECT DISTINCT value FROM service_attr WHERE name = 'graph_category'");
		$sth->execute();

		my $globalcats = [];
		while (my ($_category) = $sth->fetchrow_array) {
		my %urls = map { ("URL$_" => lc("$_category-$_")) } @times;
		push @$globalcats, {
			NAME => $_category,
			%urls,
		};
	}
	$template_params{GLOBALCATS} = $globalcats;
}

# Handle all the special pages that are not in the url table, but with fixed urls
if ($path eq "") {
	# Emit overview template
	$template_filename = 'munin-overview.tmpl';

	# Header params
	###################
	{
		$template_params{PATH} = [
			{ } , # XXX - Template says first args has to be empty
			{ "pathname" => "Overview", },
		];
	}

	# Main page
	{
		# Constructing the recursive datastructure.
		# Note that it is quite naive, and not optimized for speed.
		my $sth_grp = $dbh->prepare_cached("SELECT g.id, g.name, u.path FROM grp g INNER JOIN url u ON u.id = g.id AND u.type = 'group' AND p_id = ?");
		my $sth_grp_root = $dbh->prepare_cached("SELECT g.id, g.name, u.path FROM grp g INNER JOIN url u ON u.id = g.id AND u.type = 'group' AND p_id IS NULL");
		my $sth_node = $dbh->prepare_cached("SELECT n.id, n.name, u.path, n.path FROM node n INNER JOIN url u ON u.id = n.id AND u.type = 'node' AND n.grp_id = ?");

		$template_params{GROUPS} = _get_params_groups($dbh, $sth_grp, $sth_grp_root, $sth_node, undef);
	}

	# TODO - We still have to write the bottom navigation links

	goto RENDERING;

} elsif ($path eq "problems.html") {
	# Emit problem template
	goto RENDERING;
}


# Handle normal pages, remove an eventual .html
$path =~ s/(index)?\.html$//;

my $sth_url = $dbh->prepare_cached("SELECT id, type FROM url WHERE path = ?");
$sth_url->execute($path);
my ($id, $type) = $sth_url->fetchrow_array;

if (! defined $id) {
	# Not found
	print header( -status => 404, );
	next;
} elsif ($type eq "group") {
	# Emit group template
} elsif ($type eq "node") {
	# Emit node template
	$template_filename = 'munin-nodeview.tmpl';

	my $sth_category = $dbh->prepare(
		"SELECT sa.value as graph_category FROM service s
		INNER JOIN service_attr sa ON sa.id = s.id AND sa.name = 'graph_category'
		WHERE s.node_id = ?
		ORDER BY graph_category");
	$sth_category->execute($id);

	my $categories = [];
	while (my ($_category) = $sth_category->fetchrow_array) {
		my $sth = $dbh->prepare_cached("SELECT s.id, sa_t.value as service_title, u.path AS url
			FROM service s
			INNER JOIN service_attr sa_c ON sa_c.id = s.id AND sa_c.name = 'graph_category' AND sa_c.value = ?
			INNER JOIN service_attr sa_t ON sa_t.id = s.id AND sa_t.name = 'graph_title'
			INNER JOIN url u ON u.id = s.id AND u.type = 'service'
			WHERE s.node_id = ?
			ORDER BY service_title ASC");
		$sth->execute($_category, $id);

		my $services = [];
		while (my ($_s_id, $_service_title, $_url) = $sth->fetchrow_array) {
			my %imgs = map { ("IMG$_" => script_name() . "/../munin-cgi-graph" . lc("/$_url-$_.png")) } @times;
			push @$services, {
				NAME => $_service_title,
				URLX => url_absolutize("$_url.html"),
				%imgs,
			};
		}


		push @$categories, {
			NAME => $_category,
			SERVICES => $services,
		};
	}

	$template_params{CATEGORIES} = $categories;


} elsif ($type eq "service") {
	# Emit service template
	$template_filename = 'munin-serviceview.tmpl';

	my $sth;

	$sth = $dbh->prepare_cached("SELECT value FROM service_attr WHERE id = ? and name = 'graph_title'");
	$sth->execute($id);
	my ($graph_title) = $sth->fetchrow_array();

	$sth = $dbh->prepare_cached("SELECT n.id, n.name FROM node n INNER JOIN service s ON s.node_id = n.id");
	$sth->execute($id);

	$sth = $dbh->prepare_cached("SELECT g.name FROM grp g INNER JOIN node n ON n.grp_id = g.id");
	$sth->execute($id);
	my ($node_title) = $sth->fetchrow_array();

	my ($group_title) = $sth->fetchrow_array();

	$template_params{PATH} = [
		{ } , # XXX - Template says first args has to be empty
		{ "pathname" => "$group_title", },
		{ "pathname" => "$node_title", },
		{ "pathname" => "$graph_title", },
	];

	# Create the params
	my %service_template_params;
	for my $t (@times) {
			$service_template_params{"ZOOM$t"} = "";
			$service_template_params{"IMG$t"} = "$path-$t.png";
		}

		$template_params{SERVICES} = [ \%service_template_params,];
	}

RENDERING:
	if (! $template_filename ) {
		# Unknown
		print header( -status => 404, );
		next;
	}

	print header( -status => 200, "-Content-Type" => "text/html", );
	my $template = HTML::Template::Pro->new(
		filename => "$Munin::Common::Defaults::MUNIN_CONFDIR/templates/$template_filename",
	);

	$template->param(%template_params);

	# We cannot use "print_to => \*STDOUT" since it does *NOT* work with FastCGI
	print $template->output();
}

sub _get_params_groups {
	my ($dbh, $sth_grp_normal, $sth_grp_root, $sth_node, $g_id) = @_;

	my $sth_grp;
	if (defined $g_id) {
		$sth_grp = $sth_grp_normal;
		$sth_grp->execute($g_id);
	} else {
		$sth_grp = $sth_grp_root;
		$sth_grp->execute();
	}

	my $groups = [];
	while (my ($_g_id, $_name, $_path) = $sth_grp->fetchrow_array) {
		push @$groups, {
			NAME => $_name,
			URL => $_path,
			GROUPS => _get_params_groups($dbh, $sth_grp_normal, $sth_grp_root, $sth_node, $_g_id),
			COMPARE => 1,
			PATH => [
				{ PATH => '..', PATHNAME => undef, },
				{ PATH => '', PATHNAME => $_name, },
			],
		};
	}

	# Add the nodes
	$sth_node->execute($g_id);
	while (my ($_n_id, $_name, $_path) = $sth_node->fetchrow_array) {
		my $sth = $dbh->prepare_cached("SELECT DISTINCT sa.value FROM service s INNER JOIN service_attr sa ON sa.id = s.id AND sa.name = 'graph_category' WHERE s.node_id = ?");
		$sth->execute($_n_id);

		my $categories = [];
		while (my ($_category) = $sth->fetchrow_array) {
			push @$categories, {
				NAME => $_category,
				URL => "$_path.html" . "#" . lc("$_category"),
			};
		}

		push @$groups, {
			CATEGORIES => $categories,
			NCATEGORIES => (scalar @$categories), # This is a node.
			NAME => $_name,
			URL => "$_path.html",
			GROUPS => [],
		};
	}

	return $groups;
}

sub get_param
{
	my ($param) = @_;

	# Ok, now SQL is needed to go further
        use DBI;
	my $datafilename = "$Munin::Common::Defaults::MUNIN_DBDIR/datafile.sqlite";
        my $dbh = DBI->connect("dbi:SQLite:dbname=$datafilename","","") or die $DBI::errstr;

	my ($value) = $dbh->selectrow_array("SELECT value FROM param WHERE name = ?", undef, ($param));

	return $value;
}

sub url_absolutize
{
	my ($url) = @_;
	return script_name() . "/" . $url;
}
