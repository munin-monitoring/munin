#!/bin/sh

# Generate a version string for use when building.
#
# If RELEASE exists, and is non-empty, use the contents of that file.
# This is in case we're building from a tarball.
#
# If we're inside a git tree:
#
# - For the "devel" branch, generate a "devel-date-hash" version.
#
# - For other branches, use "git describe". This should result in a
#   clean version for the tagged releases on "master", and a
#   version-revision on the packaging tags.
#
# If we're still looking for a version, use "unknown".

current_git_branch() {
    # Handle this too:

    # git checkout 2.0.9
    # git branch
    # * (no branch)
    #   devel

    GB="$(git branch | awk '$1 == "*" {print $2}')"
    case $GB in
	"(no" ) echo;;
	*     ) echo $GB;;
    esac
}

generate_version_string() {
    branch="$(current_git_branch)"
    case "${branch}" in
        ""|master)
            git describe
            ;;
        *)
            GIT_REVISION="$(git describe --long | sed 's/-g.*//')"
            git log -n 1 --pretty="${GIT_REVISION}-${branch}-%ad-%tc" --date=short
            ;;
    esac
}

generate_version_string_from_dir() {
	basename $(pwd) | grep -e '^munin-' | cut -c7-
}

if [ -s "RELEASE" ]; then
    cat RELEASE
elif [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]; then
    generate_version_string
elif [ ! -z "$(generate_version_string_from_dir)" ]; then
	generate_version_string_from_dir
else
    echo "unknown"
fi
